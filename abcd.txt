package com.ms.crm.client360.bff.repository.configurations.commons;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import org.apache.hc.client5.http.auth.AuthScope;
import org.apache.hc.client5.http.auth.Credentials;
import org.apache.hc.client5.http.auth.StandardAuthScheme;
import org.apache.hc.client5.http.impl.auth.BasicCredentialsProvider;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.config.RequestConfig;

import java.security.Principal;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class HttpClientProvider {

    public static CloseableHttpClient createHttpClient(
            Consumer<RequestConfig.Builder> requestConfigBuilderConsumer,
            Consumer<HttpClientBuilder> httpClientBuilderConsumer) throws Exception {

        Credentials credentials = new Credentials() {
            @Override
            public Principal getUserPrincipal() {
                return null;
            }

            @Override
            public char[] getPassword() {
                return null;
            }
        };

        BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(new AuthScope(null, -1), credentials);

        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom()
                .setAuthenticationEnabled(true)
                .setTargetPreferredAuthSchemes(Collections.singletonList(StandardAuthScheme.SPNEGO))
                .setConnectTimeout(5000, TimeUnit.MILLISECONDS)
                .setResponseTimeout(5000, TimeUnit.MILLISECONDS);

        if (requestConfigBuilderConsumer != null) {
            requestConfigBuilderConsumer.accept(requestConfigBuilder);
        }

        HttpClientBuilder httpClientBuilder = HttpClients.custom()
                .setDefaultCredentialsProvider(credentialsProvider)
                .setDefaultRequestConfig(requestConfigBuilder.build());

        if (httpClientBuilderConsumer != null) {
            httpClientBuilderConsumer.accept(httpClientBuilder);
        }

        return httpClientBuilder.build();
    }
}





package com.ms.crm.client360.bff.repository.configurations;

import com.ms.crm.client360.bff.repository.configurations.commons.HttpClientProvider;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;

@Configuration
public class MSConnectAutoConfiguration {

    @Bean
    public CloseableHttpClient msConnectHttpClient() throws Exception {
        return HttpClientProvider.createHttpClient(builder -> {}, builder -> {});
    }

    @Bean(name = "msConnectWebClient")
    public WebClient msConnectWebClient(CloseableHttpClient msConnectHttpClient) {
        HttpClient reactorHttpClient = HttpClient.from(msConnectHttpClient);
        return WebClient.builder()
                .clientConnector(new ReactorClientHttpConnector(reactorHttpClient))
                .build();
    }
}



package com.ms.crm.client360.bff.repository.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/msconnect")
@RequiredArgsConstructor
public class MSConnectController {

    @Qualifier("msConnectWebClient")
    private final WebClient msConnectWebClient;

    @Value("${msconnect.url}")
    private String msConnectApiUrl;

    @GetMapping("/hi")
    public ResponseEntity<String> hi() {
        return ResponseEntity.ok("Hello from MSConnectController");
    }

    @PostMapping("/contacts")
    public Mono<ResponseEntity<String>> topContacts(@RequestBody Object payload) {
        return msConnectWebClient.post()
                .uri(msConnectApiUrl)
                .bodyValue(payload)
                .retrieve()
                .bodyToMono(String.class)
                .map(ResponseEntity::ok)
                .onErrorResume(e -> Mono.just(ResponseEntity.status(500).body("Error calling MSConnect: " + e.getMessage())));
    }

    @PostMapping("/connections")
    public Mono<ResponseEntity<String>> strongConnections(@RequestBody Object payload) {
        return msConnectWebClient.post()
                .uri(msConnectApiUrl)
                .bodyValue(payload)
                .retrieve()
                .bodyToMono(String.class)
                .map(ResponseEntity::ok)
                .onErrorResume(e -> Mono.just(ResponseEntity.status(500).body("Error calling MSConnect: " + e.getMessage())));
    }
}
