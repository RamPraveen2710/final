package com.ms.crm.client360.bff.repository.configurations;

import msjava.kerberos.auth.MSKerberosAuthenticationException;
import msjava.kerberos.auth.MSKerberosAuthenticator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;

import java.net.URL;

@Configuration
public class MSConnectAutoConfiguration {

    @Value("${msconnect.url}")
    private URL url;

    @Bean
    public WebClient msConnectWebClient() throws MSKerberosAuthenticationException {
        MSKerberosAuthenticator msKerberosAuthenticator = new MSKerberosAuthenticator(false);

        // Generate Negotiate Kerberos token
        String kerberosToken = "Negotiate " + msKerberosAuthenticator.getAuthToken("HTTP@" + url.getHost(), null);

        return WebClient.builder()
                .baseUrl(url.toString())
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
                .defaultHeader(HttpHeaders.AUTHORIZATION, kerberosToken)  // ðŸ‘ˆ Attaching Authorization header
                .build();
    }
}





package com.ms.crm.client360.bff.repository.controller;

import com.ms.crm.client360.bff.repository.dto.Payload;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/msconnect")
@RequiredArgsConstructor
public class MSConnectController {

    private final WebClient msConnectWebClient;

    @PostMapping(value = "/call", consumes = "application/json", produces = "application/json")
    public Mono<ResponseEntity<String>> callMSConnectAPI(@RequestBody Payload payload) {
        return msConnectWebClient.post()
                .bodyValue(payload)
                .retrieve()
                .bodyToMono(String.class)
                .map(ResponseEntity::ok)
                .onErrorResume(e -> Mono.just(ResponseEntity.status(500).body("Error: " + e.getMessage())));
    }
}



